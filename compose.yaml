# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3'
services:
  server:
    networks:
      - helpdesknetwork
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 3001:3001

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy
  db:
    networks:
      - helpdesknetwork
    image: mysql
    container_name: helpdesk-mysqlserver
    environment:
      MYSQL_ROOT_PASSWORD: null
      MYSQL_DATABASE: helpdesk_it_db
      MYSQL_PASSWORD: null
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      TZ: Asia/Jakarta
      # MYSQL_USER: root
    ports:
      - 3306:3306
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 20s
      timeout: 10s
      retries: 5
networks:
  helpdesknetwork:
